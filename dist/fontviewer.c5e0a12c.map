{"version":3,"sources":["index.js"],"names":["glyphs","document","querySelector","color","size","addEventListener","event","opentype","load","target","value","err","font","console","log","style","createElement","type","appendChild","createTextNode","head","showFont","x","fontSize","parseInt","querySelectorAll","forEach","g","maxWidth","minWidth","maxHeight","minHeight","file","files","arrayReader","FileReader","readAsArrayBuffer","onload","parse","result","supported","fontFamily","innerHTML","charCodes","Object","values","filter","glyph","unicode","undefined","map","fontName","names","inner","charCode","String","fromCharCode","join","fontFace","window","FontFace","fonts","add","dataset","details","visibility","top","clientY","left","clientX"],"mappings":"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","file":"fontviewer.c5e0a12c.map","sourceRoot":"..","sourcesContent":["const glyphs = document.querySelector('.glyphs');\nlet color = 'DimGrey';\nlet size = '96px'\n\ndocument.querySelector('.font-family-selector').addEventListener('change', function(event) {\n  opentype.load(`/fonts/${event.target.value}-Regular.ttf`, (err, font) => {\n    if (err) {\n      console.log(err);\n    }\n    const style = document.createElement('style');\n    style.type = 'text/css';\n    style.appendChild(document.createTextNode(`\n        @font-face {\n          font-family: Lato;\n          src: url(/fonts/${event.target.value}-Regular.ttf);\n        }\n      `));\n    document.head.appendChild(style);\n    showFont(font);\n  });\n});\n\ndocument.querySelector('.font-size-selector').addEventListener('change', function(event) {\n  const x = event.target.value;\n  glyphs.style.fontSize = x;\n  size = `${parseInt(x) + parseInt(x)}px`;\n  console.log(size);\n  document.querySelectorAll('.glyph').forEach(g => {\n    g.style.maxWidth = size;\n    g.style.minWidth = size;\n    g.style.maxHeight = size;\n    g.style.minHeight = size;\n  });\n});\n\ndocument.querySelector('.color-selector').addEventListener('change', function(event) {\n  color = event.target.value;\n  glyphs.style.color = color;\n});\n\ndocument.querySelector('.file-reader').addEventListener('change', function(event) {\n  const file = event.target.files[0];\n  if (file) {\n    const arrayReader = new FileReader();\n    arrayReader.readAsArrayBuffer(file);\n    arrayReader.onload = function(event) {\n      let font;\n      try {\n        font = opentype.parse(event.target.result);\n      } catch (err) {\n        font = { supported: false };\n      }\n      showFont(font);\n    }\n  }\n});\n\nfunction showFont(font) {\n  if (!font.supported) {\n    glyphs.style.color = 'tomato';\n    glyphs.style.fontFamily = '\"Helvetica Neue\", Helvetica, Arial';\n    glyphs.innerHTML = 'Invalid font file or unsupported format';\n    return;\n  }\n  const charCodes = Object.values(font.glyphs.glyphs).filter(glyph => glyph.unicode !== undefined).map(g => g.unicode)\n  const fontName = Object.values(font.names.fontFamily)[0];\n\n  const inner = charCodes.map(charCode => `<span class=\"glyph\" data-unicode=\"${charCode}\">${String.fromCharCode(charCode)}</span>`).join('\\t');\n  glyphs.innerHTML = inner;\n\n  const fontFace = new window.FontFace(fontName, event.target.result);\n  console.log(fontName)\n  document.fonts.add(fontFace);\n\n  document.querySelectorAll('.glyph').forEach(g => {\n    g.style.maxWidth = size;\n    g.style.minWidth = size;\n    g.style.maxHeight = size;\n    g.style.minHeight = size;\n\n    g.addEventListener('mouseover', event => {\n      const unicode = event.target.dataset.unicode;\n      const details = document.querySelector('.details');\n      details.style.visibility = 'visible';\n      details.innerHTML = unicode;\n      details.style.top = `${event.clientY}px`;\n      details.style.left = `${event.clientX}px`;\n    });\n  });\n  glyphs.style.color = color;\n  glyphs.style.fontFamily = fontName;\n}\n\n"]}